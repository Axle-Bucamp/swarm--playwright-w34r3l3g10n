
services:
  # Redis pour la coordination et les queues
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - swarm_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Coordinateur MCP principal
  coordinator:
    build:
      context: ./coordinator
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8010:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - LOAD_BALANCER_URL=http://load-balancer:8080
      - LOG_LEVEL=INFO
      - AGENT_POOL_SIZE=5
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - swarm_net
    volumes:
      - ./coordinator:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer
  load-balancer:
    build:
      context: ./load-balancer
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - AGENT_DISCOVERY_INTERVAL=30
      - HEALTH_CHECK_INTERVAL=10
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - swarm_net
    volumes:
      - ./load-balancer:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agents Playwright (3 répliques pour le développement)
  agent:
    build:
      context: ./agent
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8000-8002:8000"
    environment:
      - TOR_PROXY_HOST=tor
      - TOR_PROXY_PORT=9050
      - HEADLESS=true
      - LOG_LEVEL=INFO
      - MAX_CONCURRENT_TASKS=3
    depends_on:
      - tor
      - warp
    networks:
      - swarm_net
    volumes:
      - ./agent:/app
      - /dev/shm:/dev/shm  # Partage de mémoire pour Playwright
    deploy:
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Conteneurs Tor (un par agent)
  tor:
    build:
      context: ./tor
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - CIRCUIT_ROTATION_INTERVAL=300
      - ENABLE_CIRCUIT_ROTATION=true
      - ENABLE_MONITORING=true
    networks:
      - swarm_net
    deploy:
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "--socks5-hostname", "127.0.0.1:9050", "-s", "http://httpbin.org/ip"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Conteneurs WARP (un par agent)
  warp:
    build:
      context: ./warp
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - ENABLE_SOCKS_PROXY=true
      - ENABLE_HTTP_PROXY=true
      - SOCKS_PORT=1080
      - HTTP_PORT=3128
    networks:
      - swarm_net
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.forwarding=1
      - net.ipv4.ip_forward=1
    deploy:
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "--interface", "wgcf", "-s", "http://httpbin.org/ip"]
      interval: 60s
      timeout: 30s
      retries: 3
      
  # Monitoring avec Prometheus (optionnel pour le développement)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - swarm_net
    profiles:
      - monitoring

  # Grafana pour la visualisation (optionnel)
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - swarm_net
    profiles:
      - monitoring

networks:
  swarm_net:
    driver: bridge
    ipam:
      config:
        - subnet: 173.21.0.0/16

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

